# Python Sets - Complete Guide with Real-World Examples

## 1. Set ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à? (Real-Life Analogy)
### **Definition:**
# - **Set** ‡§è‡§ï **unordered collection** ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç **unique elements** ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
# - ‡§á‡§∏‡§Æ‡•á‡§Ç **duplicate values ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡•á**‡•§
# - ‡§Ø‡§π **mutable (modifiable)** ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§á‡§∏‡§ï‡•á **elements immutable** ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è‡•§

# ### **Real-Life Example:**
# - **Classroom Attendance** ‚Äì ‡§è‡§ï **set** ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ **unique students** ‡§π‡•ã‡§Ç‡§ó‡•á, ‡§ï‡•ã‡§à ‡§®‡§æ‡§Æ ‡§¶‡•ã ‡§¨‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ‡•§
# - **Unique Colors in a Palette** ‚Äì ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä **painting app** ‡§Æ‡•á‡§Ç **‡§π‡§∞ color** ‡§∏‡§ø‡§∞‡•ç‡§´ **‡§è‡§ï ‡§¨‡§æ‡§∞** ‡§π‡•ã‡§ó‡§æ‡•§

# ---
## 2. Set ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á
### a) **Basic Set** (Curly Braces `{}` ‡§∏‡•á)

colors = {"red", "blue", "green"}
print(colors)  # {'red', 'blue', 'green'}


### b) **set() Constructor ‡§∏‡•á**

numbers = set([1, 2, 3, 4, 2, 3])  # Duplicates ‡§π‡§ü ‡§ú‡§æ‡§è‡§Å‡§ó‡•á
print(numbers)  # {1, 2, 3, 4}


### c) **Empty Set ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡§æ**

empty_set = set()  # ‚úÖ ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡§æ
wrong_set = {}      # ‚ùå ‡§ó‡§≤‡§§ ‡§§‡§∞‡•Ä‡§ï‡§æ (‡§Ø‡§π Dictionary ‡§¨‡§®‡•á‡§ó‡•Ä)


## 3. Set ‡§ï‡•á Operations (Basic Operations)
### a) **Add Elements** (`add()`)

fruits = {"apple", "banana"}
fruits.add("orange")
print(fruits)  # {'apple', 'banana', 'orange'}


### b) **Remove Elements** (`remove()` & `discard()`)

numbers = {1, 2, 3, 4}
numbers.remove(2)  # 2 ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§ó‡§æ
numbers.discard(5)  # Error ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§ó‡§æ, ‡§Ö‡§ó‡§∞ 5 ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
print(numbers)  # {1, 3, 4}


### c) **Pop Elements** (`pop()` ‚Äì Randomly ‡§ï‡•ã‡§à ‡§è‡§ï Element ‡§π‡§ü‡§æ‡§è‡§ó‡§æ)
 
items = {"pen", "pencil", "eraser"}
removed_item = items.pop()
print(items)  # Random element ‡§π‡§ü ‡§ú‡§æ‡§è‡§ó‡§æ


### d) **Clear Set** (`clear()` ‚Äì ‡§™‡•Ç‡§∞‡§æ Set ‡§ñ‡§æ‡§≤‡•Ä ‡§ï‡§∞ ‡§¶‡•á‡§ó‡§æ)
 #
cars = {"BMW", "Audi", "Tesla"}
cars.clear()
print(cars)  # set()


### e) **Check Element Presence** (`in` operator)
 #
cities = {"Delhi", "Mumbai", "Kolkata"}
print("Delhi" in cities)  # True
print("Chennai" in cities)  # False


## 4. Set Operations (Mathematical Operations)
### a) **Union (`|` ‡§Ø‡§æ `union()`)**
 #
A = {1, 2, 3}
B = {3, 4, 5}
print(A | B)  # {1, 2, 3, 4, 5}
print(A.union(B))  # {1, 2, 3, 4, 5}


### b) **Intersection (`&` ‡§Ø‡§æ `intersection()`)**
#
print(A & B)  # {3}
print(A.intersection(B))  # {3}


### c) **Difference (`-` ‡§Ø‡§æ `difference()`)**
#
print(A - B)  # {1, 2} (‡§ú‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ A ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç)
print(B - A)  # {4, 5} (‡§ú‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ B ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç)


### d) **Symmetric Difference (`^` ‡§Ø‡§æ `symmetric_difference()`)**
#
print(A ^ B)  # {1, 2, 4, 5} (‡§ú‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç)



## 5. Set Methods (Advanced Techniques)
# | Method | Use Case |
# |--------|---------|
# | `add(x)` | Set ‡§Æ‡•á‡§Ç `x` Add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à |
# | `remove(x)` | `x` Remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, Error ‡§¶‡•á‡§ó‡§æ ‡§Ö‡§ó‡§∞ `x` ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ |
# | `discard(x)` | `x` Remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, Error ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§ó‡§æ |
# | `pop()` | Random element Remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à |
# | `clear()` | ‡§™‡•Ç‡§∞‡§æ Set Empty ‡§ï‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à |
# | `union(set2)` | ‡§¶‡•ã Sets ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à |
# | `intersection(set2)` | Common elements ‡§¶‡•á‡§§‡§æ ‡§π‡•à |
# | `difference(set2)` | ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§™‡§π‡§≤‡•á Set ‡§ï‡•á Unique Elements ‡§¶‡•á‡§§‡§æ ‡§π‡•à |
# | `symmetric_difference(set2)` | ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç Unique Elements ‡§¶‡•á‡§§‡§æ ‡§π‡•à |
# | `issubset(set2)` | ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§™‡§π‡§≤‡§æ Set ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡§æ Subset ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç |
# | `issuperset(set2)` | ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§™‡§π‡§≤‡§æ Set ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡§æ Superset ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç |


## 6. Real-World Examples
### a) **Duplicate-Free Student Names List**
#
students = ["Aman", "Rahul", "Priya", "Aman", "Rahul"]
unique_students = set(students)
print(unique_students)  # {'Aman', 'Rahul', 'Priya'}


### b) **Common Ingredients in Two Recipes**

recipe1 = {"tomato", "onion", "salt"}
recipe2 = {"onion", "garlic", "salt"}
common_ingredients = recipe1 & recipe2
print(common_ingredients)  # {'onion', 'salt'}


### c) **Movies Watched by Two Friends**

john_movies = {"Inception", "Avengers", "Interstellar"}
doe_movies = {"Interstellar", "Titanic", "Avengers"}
common_movies = john_movies.intersection(doe_movies)
print(common_movies)  # {'Avengers', 'Interstellar'}

### d) **Banned Words Filter in Chat Application**
#
banned_words = {"spam", "fake", "scam"}
message = "This is not a scam!"
words = set(message.lower().split())
if words & banned_words:
    print("Warning: Message contains banned words!")


## 7. Common Mistakes & Debugging
### a) **Mutable Elements Error** (Set ‡§Æ‡•á‡§Ç List ‡§®‡§π‡•Ä‡§Ç ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡•á)
#
my_set = {1, 2, [3, 4]}  # ‚ùå TypeError: unhashable type: 'list'

# **‚úÖ ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡§æ:**
#
my_set = {1, 2, tuple([3, 4])}  # ‚úÖ Tuple ‡§ï‡•ã Use ‡§ï‡§∞‡•á‡§Ç


### b) **Duplicate Values ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§π‡§ü ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç**
#
nums = {1, 2, 2, 3, 3, 4}
print(nums)  # {1, 2, 3, 4}


## üéØ **Final Challenge**
#
A = {1, 2, 3, 4}
B = {3, 4, 5, 6}
A.difference_update(B)
print(A)

# **Output:** `{1, 2}` (A ‡§Æ‡•á‡§Ç ‡§∏‡•á B ‡§ï‡•á Common Elements ‡§π‡§ü ‡§ó‡§è)

# ‡§Ö‡§¨ ‡§Ü‡§™ **Python Sets Master** ‡§¨‡§® ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç! üöÄ ‡§Ö‡§ó‡§≤‡§æ ‡§ï‡§¶‡§Æ: **Tuples & Dictionaries** ‡§∏‡•Ä‡§ñ‡•á‡§Ç ‡§Ø‡§æ **Real-World Projects** ‡§¨‡§®‡§æ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç! üòä

