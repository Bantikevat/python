
# 
# String Object ‡§ï‡•Ä ‡§â‡§¶‡§æ‡§π‡§∞‡§£
name = "Alice"  # Memory ‡§Æ‡•á‡§Ç ‡§è‡§ï String Object ‡§¨‡§®‡§§‡§æ ‡§π‡•à
name = "Bob"    # ‡§®‡§Ø‡§æ Object ‡§¨‡§®‡§§‡§æ ‡§π‡•à, ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§¶‡§≤‡§§‡§æ
print(name
      )  # Output: Bob

# Single/Double Quotes: ‡§Ü‡§™ Single ‡§Ø‡§æ Double Quotes ‡§¶‡•ã‡§®‡•ã‡§Ç Use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
s1 = 'Single Quotes ‡§Æ‡•á‡§Ç "Double Quotes" Use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§'
s2 = "Double Quotes ‡§Æ‡•á‡§Ç 'Single Quotes' Use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
print(s1)  # Output: Single Quotes ‡§Æ‡•á‡§Ç "Double Quotes" Use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
print(s2)  # Output: Double Quotes ‡§Æ‡•á‡§Ç 'Single Quotes' Use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

# Multi-line String: ‡§Ü‡§™ Triple Quotes (""" ‡§Ø‡§æ ''') Use ‡§ï‡§∞‡§ï‡•á Multi-line String Declare ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
address = """123, Main Road
Mumbai, 400001"""
print(address)
# Output:
# 123, Main Road
# Mumbai,

# Escape Characters: ‡§Ü‡§™ Escape Characters ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® Characters ‡§ï‡•ã Print ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
# \n: New Line
# \t: Tab
# \": Double Quote
# \': Single Quote
# \\: Backslash
print("Hello\nWorld")
# Output:
# Hello
# World


# d. Raw Strings (Escape Ignore):
# ‡§Ü‡§™ Raw Strings Declare ‡§ï‡§∞‡§ï‡•á Escape Characters ‡§ï‡•ã Ignore ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
# ‡§â‡§¶‡§æ‡§π‡§∞‡§£: r"Hello\nWorld"
print(r"Hello\nWorld")
raw_path = r"C:\Users\Desktop"  # 'r' Prefix ‚Üí \ ‡§ï‡•ã Escape ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ
print(raw_path)  # Output: C:\Users\Desktop
# Output: Hello\nWorld

# String Operations & Indexing
# Concatenation: ‡§Ü‡§™ + Operator ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á Strings ‡§ï‡•ã Concatenate ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
first_name = "Alice"
last_name = "Bob"
full_name = first_name + " " + last_name
print(full_name)  # Output: Alice Bob

#  Repetition (‡§¶‡•ã‡§π‡§∞‡§æ‡§®‡§æ):
# ‡§Ü‡§™ * Operator ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã ‡§¶‡•ã‡§π‡§∞‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
print("Hello " * 3)  # Output: Hello Hello Hello

#  Indexing (Position Access):
# ‡§Ü‡§™ [] Bracket ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•á Characters ‡§ï‡•ã Access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
# Indexing: 0 ‡§∏‡•á Start ‡§π‡•ã‡§§‡§æ ‡§π‡•à
# -1: Last Character
# -2: Second Last Character
name = "Alice"
print(name[0])  # Output: A
print(name[-1])  # Output: e

# Slicing (Range Access):
# ‡§Ü‡§™ [:] Colon ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á Range Access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
# [start:end:step]
# start: Start Index
# end: End Index (Not Included)
# step: Step Value
name = "Alice"
print(name[0:3])  # Output: Ali
print(name[1:])  # Output: lice
print(name[:3])  # Output: Ali
print(name[::2])  # Output: Ac
print(name[::-1])  # Output: ecilA



# String Methods
# String Methods: ‡§Ü‡§™ String Methods ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Modify ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
# Method: ‡§è‡§ï Function ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ú‡•ã Object ‡§ï‡•ã Modify ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

# Upper Case: ‡§Ü‡§™ upper() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Upper Case ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.upper())  # Output: ALICE

# Lower Case: ‡§Ü‡§™ lower() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Lower Case ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.lower())  # Output: alice

# Title Case: ‡§Ü‡§™ title() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Title Case ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "alice bob"
print(name.title())  # Output: Alice

# Replace: ‡§Ü‡§™ replace() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Replace ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.replace("A", "B"))  # Output: Blice

# Split: ‡§Ü‡§™ split() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Split ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§   # ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï Separator ‡§¶‡•á‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
name = "Alice Bob"
print(name.split(" "))  # Output: ['Alice', 'Bob']

# Join: ‡§Ü‡§™ join() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Join ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•ã List ‡§ï‡•ã Join ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Use ‡§ï‡§∞‡•á‡§Ç‡•§
name = ["Alice", "Bob"]
print(" ".join(name))  # Output: Alice Bob

# Format: Dynamic Values Insert ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ü‡§™ {} Placeholder ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á Dynamic Values Insert ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
age = 25
print("Name: {}, Age: {}".format(name, age))  # Output: Name
# : Alice,
# Age: 25

# f-Strings (Python 3.6+): ‡§Ü‡§™ f-Strings ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á Dynamic Values Insert ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
age = 25
print(f"Name: {name}, Age: {age}")  # Output: Name: Alice, Age: 25





# S.strip(): ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§§‡§∞‡§´ ‡§ï‡•á Whitespace ‡§π‡§ü‡§æ‡§è‡§Å (User Input Clean ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)‡•§
name = " Alice "
print(name.strip())  # Output: Alice

# Lstrip: ‡§Ü‡§™ lstrip() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Lstrip ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = " Alice "
print(name.lstrip())  # Output: Alice

# Rstrip: ‡§Ü‡§™ rstrip() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Rstrip ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = " Alice "
print(name.rstrip())  # Output: Alice

# Find: ‡§Ü‡§™ find() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Find ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.find("A"))  # Output: 0

# Count: ‡§Ü‡§™ count() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Count ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name .count("A"))  # Output: 1

# Replace: ‡§Ü‡§™ replace() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Replace ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.replace("A", "B"))  # Output: Blice

# Length: ‡§Ü‡§™ len() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•Ä Length ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(len(name))  # Output: 5

# Check: ‡§Ü‡§™ in Operator ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print("A" in name)  # Output: True

# Check: ‡§Ü‡§™ not in Operator ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print("A" not in name)  # Output: False

# Check: ‡§Ü‡§™ startswith() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.startswith("A"))  # Output: True

# Check: ‡§Ü‡§™ endswith() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.endswith("e"))  # Output: True

# Check: ‡§Ü‡§™ isdigit() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "123"
print(name.isdigit())  # Output: True

# Check: ‡§Ü‡§™ isalpha() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.isalpha())  # Output: True

# Check: ‡§Ü‡§™ isalnum() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice123"
print(name.isalnum())  # Output: True

# Check: ‡§Ü‡§™ islower() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "alice"
print(name
      .islower())  # Output: True

# Check: ‡§Ü‡§™ isupper() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "ALICE"
print(name.isupper())  # Output: True

# Check: ‡§Ü‡§™ isnumeric() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "123"
print(name.isnumeric())  # Output: True

# Check: ‡§Ü‡§™ isidentifier() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.isidentifier())  # Output
# : True

# Check: ‡§Ü‡§™ isprintable() Method ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á String ‡§ï‡•ã Check ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
name = "Alice"
print(name.isprintable())  # Output : True

# Unicode & Encoding (Emojis, Hindi Text): ‡§Ü‡§™ Unicode ‡§ï‡§æ Use ‡§ï‡§∞‡§ï‡•á Emojis ‡§î‡§∞ Hindi Text Print ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
# Unicode: ‡§è‡§ï Standard ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§π‡§∞ Character ‡§ï‡•ã Unique Code ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
# ‡§â‡§¶‡§æ‡§π‡§∞‡§£: \u0905 (‡§Ö)
print("\u0905")  # Output: ‡§Ö
print("\U0001F600")  # Output: üòÅ
emoji = "üòä"
hindi = "‡§®‡§Æ‡§∏‡•ç‡§§‡•á"
print(len(emoji))  # 1 (Character Count)
print(hindi.encode("utf-8"))  # b'\xe0\xa4\xa8\xe0\xa4\xae...'













